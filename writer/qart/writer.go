package qart

import (
	"fmt"
	"io"
	"os"

	"github.com/yeqown/go-qrcode/v2"
)

var _ qrcode.Writer = (*Writer)(nil)

// Writer is a writer that writes QR Code to SVG to support multi QArt format.
// And it's possible to customize your own QArt format.
//
// Inspired by https://github.com/latentcat/qrbtf
type Writer struct {
	output io.Writer
}

func New() (*Writer, error) {
	fd, err := os.OpenFile("qart.svg", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)
	if err != nil {
		return nil, err
	}

	return &Writer{
		output: fd,
	}, nil
}

func (w Writer) Write(mat qrcode.Matrix) error {
	wn, hn := mat.Width(), mat.Height()
	width, height := wn*3, hn*3

	//<svg width="200" height="200" viewBox="0 0 25 25" xmlns="http://www.w3.org/2000/svg" shape-rendering="crispEdges">
	//<title>Untitled QRCode</title>
	//<desc>The SVG of QRCode is generated by http://github.com/yeqown/go-qrcode.</desc>

	// write header
	_, _ = fmt.Fprintf(w.output, `<svg width="%d" height="%d" viewBox="0 0 %d %d" xmlns="http://www.w3.org/2000/svg" shape-rendering="crispEdges">
	<title>Untitled QRCode</title>
	<desc>The SVG of QRCode is generated by http://github.com/yeqown/go-qrcode.</desc>`, width, height, wn, hn)

	// write body
	// white background
	_, _ = fmt.Fprintf(w.output, `<rect x="0" y="0" width="%d" height="%d" fill="white"/>`, wn, hn)

	mat.Iterate(qrcode.IterDirection_ROW, func(x, y int, v qrcode.QRValue) {
		if v.IsSet() {
			_, _ = fmt.Fprintf(w.output, `<rect x="%d" y="%d" width="1" height="1" fill="black"/>`, x, y)
			_, _ = fmt.Fprintln(w.output)
		}
	})

	_, _ = fmt.Fprintf(w.output, "</svg>")

	return nil
}

func (w Writer) Close() error {
	return nil
}
